type EventHandlerType<T> = (T: any) => any;
type Sibling = any;
type timeoutPropType = number;
type windowPropType = any;
type cspNoncePropType = string;
type uidPropType = string;
type tagPropType = string;
type closePropType = () => any;
type focusPropType = () => any;
type showPropType = () => any;
type exportPropType<X> = (X: any) => any;
type getSiblingsPropType = (opts?: any, boolean: any, : any) => any;
type hidePropType = () => any;
type resizePropType = any;
type getParentPropType = () => any;
type getParentDomainPropType = () => string;
type onDisplayPropType = (T: any) => any;
type onRenderedPropType = (T: any) => any;
type onRenderPropType = (T: any) => any;
type onClosePropType = (T: any) => any;
type onDestroyPropType = (T: any) => any;
type onResizePropType = (T: any) => any;
type onFocusPropType = (T: any) => any;
type onErrorPropType = (T: any) => any;
type onPropsPropType<P> = any;
type ParentPropType<P, X> = any;
type PropsInputType<P> = any;
type PropsType<P> = any;
type ChildPropsType<P, X> = any;
type PropDefinitionType<T, P, S, $Values> = () => {
    STRING: string;
    string: any;
    OBJECT: string;
    object: any;
    FUNCTION: string;
    function: any;
    BOOLEAN: string;
    boolean: any;
    NUMBER: string;
    number: any;
    ARRAY: string;
    array: any;
};
export {};
